Question 1 :

1.1  SpringBoot App using Manual Configuration

//Main Class Code

package com.godigit.SpringWebManual;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;

@SpringBootApplication

public class Test {

	public static void main(String[] args) {
		
		
		ApplicationContext context = SpringApplication.run(Test.class, args);

	
	}

}

//Controller Class Code

package com.godigit.SpringWebManual;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller

public class TestController {

	
	
	@RequestMapping("/home")
	@ResponseBody   
	// if you need to return the string or html data you need to 
	//add the dependency of the @responseBody
	
	public  String homePage() {
		
		return "This is the srpingBoot App using manual configuration";
	}
	
	 @RequestMapping("/index")
	 @ResponseBody
	public String portNumber() {
		return " This is the index page on the browser using the manual Configuration";
	}
	
} 

// pom.xml


<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
<modelVersion>4.0.0</modelVersion>
<groupId>com.godigit.SpringWebManual</groupId>
<artifactId>2.SpringBootManullyWeb</artifactId>
<version>0.0.1-SNAPSHOT</version>

<parent>

<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-parent -->

<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-parent</artifactId>
<version>2.5.8</version>



</parent>

<dependencies>

<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web -->
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-web</artifactId>

</dependency>

</dependencies>


<properties>

<java.version>1.8</java.version>

</properties>

<build>


<plugins>

<plugin>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-maven-plugin</artifactId>

</plugin>

</plugins>

</build>


</project>



//output on the browser









 





 

*******************************************************************************


1.2  SpringBoot App using SpringInitialiser

//Main Class Code

package com.example.SpringInitialiser;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SpringInitialiserApplication {

	public static void main(String[] args) {
		SpringApplication.run(SpringInitialiserApplication.class, args);
	}

}


//Controller Class Code


import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
public class SpringInitialiserController {

	@GetMapping("/initial")
	@ResponseBody
	public String  showInitialPage() {
		
		return "This is the app which is created using the Spring Initialiser";
	}
	
	
	@GetMapping("/final")
	@ResponseBody
	public String  showFinalPage() {
		
		return "This is final  page of the  app which is created using the Spring Initialiser";
	}
	
}


//pom.xml

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.3</version>
		<relativePath/><!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>SpringInitialiser</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>SpringInitialiser</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>


//Output on the browser


  


*********************************************************************************




1.3 SpringBoot App using Spring Tool Suite

//Main Class Code

package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SpringStsProject {

	public static void main(String[] args) {
		SpringApplication.run(SpringStsProject.class, args);
	}

}

//Test Controller Code

package com.example.demo;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
@Controller
public class TestController {

	@RequestMapping("/create")
	@ResponseBody
	public String  home() {
		
		return " This Api can be used to register a new user in th db  using sts inbuilt ";
	}
	
	@RequestMapping("/read")
	@ResponseBody
	
	public String read() {
		
		return "This Api  can be used for reading the data from the db  using sts inbuilt";
	}
	
	@RequestMapping("/update")
	@ResponseBody
	
	public String update() {
		
		return "This  Api can be used to update the data in the db  using sts inbuilt";
	}
	
	@RequestMapping("/delete")
	@ResponseBody
	
	public String delete() {
		
		return "This Api can be called to delete the data from th db  using sts inbuilt";
	}
	
	
	
}


//Pom.xml

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.2</version>
		<relativePath/><!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>SpringSTSproject</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>SpringSTSproject</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>



//Output on the browser



  



*******************************************************************************

Question 2:: Salary App Program



//main class

package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SalaryApp {

	public static void main(String[] args) {
		SpringApplication.run(SalaryApp.class, args);
	}

}


//Controller class Code

package com.example.demo.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;

import com.example.demo.model.SalaryAddition;

@Controller
	public class SalaryController
	{
	@GetMapping("/index")
	public String ViewForm(Model model)
	{
	model.addAttribute("Addition", new SalaryAddition());
	return "index";
	}
	@PostMapping("/addtion")
	public String addForm(@ModelAttribute SalaryAddition  salaryAddition,  BindingResult result,  Model model)
	{
			model.addAttribute("addtion",salaryAddition);
			return "calculate";
	}
	
	
	}



//model package   SalaryAddition class

package com.example.demo.model;

public class SalaryAddition {

	private double basicSalary;
	private double hra;
	private double dra;
	private double pf;
	private double grossSalary;
	private double netSalary;
	private double annualPackage;
	
	public double getBasicSalary() {
		return basicSalary;
	}
	public void setBasicSalary(double basicSalary) {
		this.basicSalary = basicSalary;
	}
	public double getHra() {
		return hra;
	}
	public void setHra(double hra) {
		this.hra = hra;
	}
	public double getDra() {
		return dra;
	}
	
	public void setDra(double dra) {
		this.dra = dra;
	}
	public double getPf() {
		return pf;
	}
	public void setPf(double pf) {
		this.pf = pf;
	}
	public double getGrossSalary() {
		return grossSalary;
	}
	public void setGrossSalary(double grossSalary) {
		this.grossSalary = grossSalary;
	}
	public double getNetSalary() {
		return netSalary;
	}
	public void setNetSalary(double netSalary) {
		this.netSalary = netSalary;
	}
	
	
	
	
	public double getAnnualPackage() {
		return annualPackage;
	}
	public void setAnnualPackage(double annualPackage) {
		this.annualPackage = annualPackage;
	}
	
	
	public double getGross() {
		
		hra = (basicSalary*10)/100;
		dra = (basicSalary*10)/100;
		
		grossSalary = basicSalary+ hra + dra;
		
		return grossSalary;
		
	}
	
	public double getNetSal() {
		

		 hra = (basicSalary*10)/100;
		 dra = (basicSalary*10)/100;
	     pf  = (basicSalary*10)/100;
	     
	     netSalary =( basicSalary + hra+ dra) - pf;
	     
	     return netSalary;
	}
	
	
	public double getAnnualPack() {
		
		hra = (basicSalary*10)/100;
		dra = (basicSalary*10)/100;
	     pf = (basicSalary*10)/100;
	     
	     netSalary = basicSalary + hra+ dra - pf;
		
		 annualPackage = netSalary*12;
		 return annualPackage;
	}
	
	
	
	
	}


//  index.html

<!DOCTYPE html>
<html xmlns ="https://www.thymeleaf.org/">
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
 
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" >
 
</head>
<body>
<div class="container">
<div class="form-group">
     <div>
<h1 class="text-center">Enter Details</h1>
     </div>
         <form th:action="@{addtion}" th:object="${addtion}" method="post">
      <div>
<label>Basic Salary</label>
<input type="text" id="basicSalary" class="form-control" name="basicSalary" >
      </div>
      <div>
<label>Hra</label>
<input type="text" id="hra" class="form-control" name="hra" >
      </div>
      
       <div>
<label>Dra</label>
<input type="text" id="dra" class="form-control" name="dra" >
      </div>
       <div>
<label>Pf</label>
<input type="text" id="pf" class="form-control" name="pf" >
      </div>
      
</br>
       <div>
<input type="submit" value="submit"  class="btn btn-success"/>
       </div>
   </form>
</div>
</div>
</body>
</html>


//calculate html

<!DOCTYPE html>
<html xmlns:th="https://www.thymeleaf.org/">
<head>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" >
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<h1 class="text-center" color="Red">Salary Details</h1>
<div class="container">


<table class="table table-bordered table-striped table-hover"  width ="100%" border="1"  cellspacing ="0" cellpadding ="10">

<tr class="bg-orange" bgcolor ="orange">
<th>Basic Salary</th>
<th>Hra</th>
<th>Dra</th>
<th>Pf</th>
<th>Gross Salary</th>
<th>Net Salary</th>
<th>Annual Package</th>
</tr>

<tr th:each ="emp :${salaryAddition}">
<th th:text="${emp.getBasicSalary()}"></th>
<th th:text="${emp.getHra()}"></th>
<th th:text="${emp.getDra()}"></th>
<th th:text="${emp.getPf()}"></th>
<th th:text="${emp.getGross()}"></th>
<th th:text="${emp.getNetSal()}"></th>
<th th:text="${emp.getAnnualPack()}"></th>


</tr>

</table>


</div>
<!-- <h1>Salary Details</h1> -->
<!-- <label>NetSalary</label> -->
<!-- <p th:text="${addtion.getNetSal()}"></p> -->
<!-- <label>Gross Salary</label> -->
<!-- <p th:text="${addtion.getGross()}"></p> -->
<!-- <label>Annual Package</label> -->
<!-- <p th:text="${addtion.getAnnualPack()}"></p> -->
</body>
</html>


//Output

  



*******************************************************************************



Question 3 : Create different examples on follwing Annotations


Annotation :: @Component

//Main Class

package com.godigit.Component;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Test {

	public static void main(String[] args) {
		
		ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");  //passing the bean
		
		//typecasting it into Company Class Object
		
		Company company1 = (Company)context.getBean("companii"); // 
		
		//calling function 
		company1.showCompanyInfo();
	}
}


//Company Class

package com.godigit.Component;

import org.springframework.stereotype.Component;

@Component("companii")

public class Company {

	public void showCompanyInfo() {
		
		System.out.println("This is a great Company I have ever worked in");
		
	}
}


//beans.xml file

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:context="http://www.springframework.org/schema/context"
xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

<context:annotation-config/>
<!-- if you use  -->
<context:component-scan base-package="com.godigit.Component"></context:component-scan>
</beans>



//Output

This is a great Company I have ever worked in

***********************************************************************************


//Main Class

>>> Annotation ::  @Scope

package com.godigit.BeanScopes;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class Test {

	public static void main(String[] args) {
		
		AnnotationConfigApplicationContext context  = new AnnotationConfigApplicationContext(MyBean.class);
		
		MyBean mb = (MyBean) context.getBean("obj");
		
	  System.out.println(mb.hashCode());
	
	  MyBean mb1 = (MyBean) context.getBean("obj");
		
	  System.out.println(mb1.hashCode());
	
	
	}
}


//MyBean Class

package com.godigit.BeanScopes;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

@Component("obj")
@Scope("singleton")   //due to this scope same bean will be generated
public class MyBean {

	public MyBean() {
		System.out.println("Bean instance created");
	}
}



//Output

Bean instance created
1095293768
1095293768

*******************************************************************************

>>> Annotation::  @Qualifier +@ Autowired

//main class

package com.godigit.AnnotationConfiguration;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Test {

	public static void main(String[] args) {
		
		//using the applicationcontext
		
ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");

//typecasting the bean received to the object of the class

House houseDetails = (House)context.getBean("house");

//printing the information recieved

System.out.println("This is the configuration using annotation qualifier and  ");

System.out.println(houseDetails.toString());

	}
}

//House.java

package com.godigit.AnnotationConfiguration;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

public class House {

	
	private int houseNo;
	private String houseType;
	@Autowired
	@Qualifier("faci")
	private Facility facility;
	public int getHouseNo() {
		return houseNo;
	}
	public void setHouseNo(int houseNo) {
		this.houseNo = houseNo;
	}
	public String getHouseType() {
		return houseType;
	}
	public void setHouseType(String houseType) {
		this.houseType = houseType;
	}
	public Facility getFacility() {
		return facility;
	}
	public void setFacility(Facility facility) {
		this.facility = facility;
	}
	@Override
	public String toString() {
		return "House [houseNo=" + houseNo + ", houseType=" + houseType + ", facility=" + facility + "]";
	}
	public House(int houseNo, String houseType, Facility facility) {
		super();
		this.houseNo = houseNo;
		this.houseType = houseType;
		this.facility = facility;
	}
	public House() {
		super();
		// TODO Auto-generated constructor stub
	}
	
	
}


//Facility.Java
package com.godigit.AnnotationConfiguration;

public class Facility {

	private String shareType;
	private int  noOfBeds;
	private int rent;
	public String getShareType() {
		return shareType;
	}
	public void setShareType(String shareType) {
		this.shareType = shareType;
	}
	public int getNoOfBeds() {
		return noOfBeds;
	}
	public void setNoOfBeds(int noOfBeds) {
		this.noOfBeds = noOfBeds;
	}
	public int getRent() {
		return rent;
	}
	public void setRent(int rent) {
		this.rent = rent;
	}
	@Override
	public String toString() {
		return "Facility [shareType=" + shareType + ", noOfBeds=" + noOfBeds + ", rent=" + rent + "]";
	}
	
	
}



//beans.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:context="http://www.springframework.org/schema/context"
xsi:schemaLocation="http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd">


<context:annotation-config></context:annotation-config>

<bean id ="faci" class ="com.godigit.AnnotationConfiguration.Facility">
<property name="shareType" value ="6 sharing"></property>
<property name="noOfBeds" value ="8"></property>
<property name="rent" value ="72000"></property>
</bean>


<bean id ="temp" class ="com.godigit.AnnotationConfiguration.Facility">
<property name="shareType" value ="2 sharing"></property>
<property name="noOfBeds" value ="2"></property>
<property name="rent" value ="12000"></property>
</bean>


<bean id ="house" class="com.godigit.AnnotationConfiguration.House">
<property name="houseNo" value="205"></property>
<property name="houseType" value ="Villa"></property>

</bean>
</beans>


//Output

This is the configuration using annotation qualifier and  
House [houseNo=205, houseType=Villa, facility=Facility [shareType=6 sharing, noOfBeds=8, rent=72000]]


********************************************************************************

>>> Annotation :: @ComponentScan + @Configuration + @Bean 


//main class

package com.godigit.removeXML;

import org.springframework.context.ApplicationContext;
//import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class Test {

	public static void main(String[] args) {
		
	//  we were passing the Config.class inside the ""  but it is not required
	ApplicationContext context = new AnnotationConfigApplicationContext(CollegeConfig.class);
	
	//i am using Annotationconfig because we are not using beans.xml
	
College college1 = (College)context.getBean("college");

System.out.println("Configuration using the java class  ");

college1.showCollegeInformation();
	}		
		
}


//College.java

package com.godigit.removeXML;

import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Component;

@Component
public class College {


public void showCollegeInformation() {
		System.out.println("Collge is known by its students studying in");
	}
}


//CollegeConfiguration.java

package com.godigit.removeXML;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

//using the @configuration to use this as configuration file
@Configuration

@ComponentScan(basePackages ="com.godigit.removeXML" ) //using componentScan fot scanning the base package 

public class CollegeConfiguration {


	@Bean
	public void show() {
		
		System.out.println("This is the calling of the show method");
	}
}


//Output

This is the calling of the show method
Configuration using the java class  
Collge is known by its students studying in

****************************************************************************

>>> Annotation @Required

//main class 

package com.godigit.SetterInjection;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Test {

public static void main(String[] args) {
	
	//using the applicationcontext 
	
	ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");  
	
	NoteBookStore book = (NoteBookStore) context.getBean("obj");  //typecasting into the NoteBookClass Object;
	
	System.out.println("The details of the book using required annotation are ::");
	
	
	System.out.println("bookName" + ""+ book.getName() );  //printing the information;
	
	System.out.println("bookName" + ""+ book.getPrice() ); 
}
}

//Book.java

package com.godigit.SetterInjection;

import org.springframework.beans.factory.annotation.Required;

public class Book {

	private String name;
	private int price;

	

	public String getName() {
		return name;
	}
	@Required
	public void setName(String name) {
		this.name = name;
	}
	public int getPrice() {
		return price;
	}
	@Required
	public void setPrice(int price) {
		this.price = price;
	}

	@Override
	public String toString() {
		return "NoteBookStore [name=" + name + ", price=" + price + ", subject=]";
	}
	
	
	
}


//beans.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:context="http://www.springframework.org/schema/context"
xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

<bean id ="obj"  class ="com.godigit.SetterInjection.Book">
<property name="name"  value ="Biology"></property>
<property name="price" value ="987"></property>

</bean>
</beans>

//Output

The details of the book using required annotation are ::
bookName Biology
bookName 987

***************************************************************************

>>>Annotation :: @Primary 


//Main class 
package com.godigit.primary.spring;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import com.godigit.app.config.AppConfig;

public class MainApp {
public static void main(String[] args) {
ApplicationContext context =  new AnnotationConfigApplicationContext(AppConfig.class);

User user=context.getBean(User.class);
user.work();


}
}

//Home class

package com.godigit.primary.spring;

public class Home implements User {

@Override
public void work() {
System.out.println("Working in home");
}

}

//Office Class

package com.godigit.primary.spring;

public class Office implements User {

@Override
public void work() {
System.out.println("Working in office");
}

}

//User Interface
package com.godigit.primary.spring;

public interface User {
public void work();
}


//Configuration Class

package com.godigit.app.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;

import com.godigit.primary.spring.Home;
import com.godigit.primary.spring.Office;
import com.godigit.primary.spring.GuestUser;
import com.godigit.primary.spring.User;

@Configuration
public class AppConfig {
@Bean
@Primary
public User getOffice() {
return new Office();
}

@Bean
public User getHome() {
return new Home();
}
}


//Output

Working in office


***************************************************************************
>>> Annotation :: @Value

//main class

package com.example.demo;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;


public class Test {


	public static void main(String[] args)
	{
		// Using ApplicationContext

ApplicationContext context= new ClassPathXmlApplicationContext("beans.xml");

		// typecasting the bean
Student student = context.getBean("student", Student.class);

		//calling the function
		student.show();
	}
}

//Student Class

com.example.demo;

import org.springframework.beans.factory.annotation.Value;

public class Student {

	
	private String name;
	private int age;

	
	@Value("Shubash")
	// Setter
	public void setName(String name)
	{
		this.name = name;
	}

	@Value("81")
	// Setter
	public void setAge(int age)
	{
		this.age = age;
	}

	// Method
	public void show()
	{
		
		System.out.println("Name: " + name);
		System.out.println("Age: " + age);
	}
}

//beans.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		https://www.springframework.org/schema/context/spring-context.xsd">

	<context:annotation-config/>

	<bean id="student" class="com.example.demo.Student">

	</bean>

</beans>


//output
Name: Shubash
Age : 81



****************************************************************************


